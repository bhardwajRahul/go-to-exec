# This example shows how you can send a Slack message using Slack webhooks.
# Slack docs: https://slack.com/intl/en-fi/help/articles/115005265063-Incoming-webhooks-for-Slack
# Test with:
#
# curl "http://localhost:7055/slack/world"
#

port: 7055

defaults:
  logOutput: true
  logArgs: true
  logCommand: true
  returnOutput: true

listeners:

  # The route
  /slack/:name:

    env:
      # If the program is run with the SLACK_HOOK environment
      # variable set, it will use that one, otherwise use the provided
      # string.
      SLACK_HOOK: '{{ coalesce (env "SLACK_HOOK") "https://hooks.slack.com/services/XXXXXXXX" }}'

    # For cleanliness and readability, save the Slack payload in a tmp YAML file,
    # which will be converted to JSON later.
    files:
      payload.yaml: |
        username: Test Slack hook from GTE!
        icon_emoji: ":jack_o_lantern:"
        text: |
          Hello {{ .name }}!

    # Command to run, and list of arguments
    command: bash
    args:
      - -c
        # When executing bash commands, we need to set -e to propagate any errors.
      - -e
      - |
        # Send the request, converting the YAML file into a JSON one on the fly, and
        # expect HTTP 200 code
        [ $(curl -s -o /dev/stderr --write-out "%{http_code}" \
          -X POST -H "Content-Type: application/json" "$SLACK_HOOK" --data-binary @- << EOF
        {{ fileReadToString (gte).files.payload_yaml | yamlToJson }}
        EOF
        ) -eq 200 ]
